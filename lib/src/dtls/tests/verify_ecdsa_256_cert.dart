import 'dart:convert';
import 'dart:typed_data';

import 'package:basic_utils/basic_utils.dart';

import '../ecdsa3.dart';

class EcdsaCert {
  Uint8List cert;
  Uint8List privateKey;
  Uint8List publickKey;
  EcdsaCert(
      {required this.privateKey, required this.publickKey, required this.cert});
}

EcdsaCert generateSelfSignedCertificate() {
  var pair = CryptoUtils.generateEcKeyPair();
  var privKey = pair.privateKey as ECPrivateKey;
  var pubKey = pair.publicKey as ECPublicKey;
  var dn = {
    'CN': 'Self-Signed',
  };
  var csr = X509Utils.generateEccCsrPem(dn, privKey, pubKey);

  // // Encode private key to PEM
  String privateKeyPem = CryptoUtils.encodeEcPrivateKeyToPem(privKey);
  // print("Private Key PEM:\n$privateKeyPem\n");

  // // Encode public key to PEM
  String publicKeyPem = CryptoUtils.encodeEcPublicKeyToPem(pubKey);
  // print("Public Key PEM:\n$publicKeyPem\n");

  var x509PEM = X509Utils.generateSelfSignedCertificate(
    privKey,
    csr,
    365,
  );

  print("Pub key: ${CryptoUtils.getBytesFromPEMString(publicKeyPem).length}");

  // print("Certificate PEM:\n$x509PEM\n");
  return EcdsaCert(
      privateKey: decodePemToDer(privateKeyPem),
      publickKey: decodePemToDer(publicKeyPem),
      cert: decodePemToDer(x509PEM));

  // return x509PEM;
}

Uint8List decodePemToDer(pem) {
  var startsWith = [
    '-----BEGIN PUBLIC KEY-----',
    '-----BEGIN PRIVATE KEY-----',
    '-----BEGIN CERTIFICATE-----',
    '-----BEGIN EC PRIVATE KEY-----'
  ];
  var endsWith = [
    '-----END PUBLIC KEY-----',
    '-----END PRIVATE KEY-----',
    '-----END CERTIFICATE-----',
    '-----END EC PRIVATE KEY-----'
  ];

  //HACK
  for (var s in startsWith) {
    if (pem.startsWith(s)) pem = pem.substring(s.length);
  }

  for (var s in endsWith) {
    if (pem.endsWith(s)) pem = pem.substring(0, pem.length - s.length);
  }

  //Dart base64 decoder does not support line breaks
  pem = pem.replaceAll('\n', '');
  pem = pem.replaceAll('\r', '');
  return Uint8List.fromList(base64.decode(pem));
}

void testCertificateVerify() {
  //test ECDSA256
  final certificateEcdsa256 = generateSelfSignedCertificate();

  print("Public key length: ${certificateEcdsa256.publickKey.length}");

  // Uint8List uncompressedPublicKey =
  //     Uint8List.fromList([0x04, ...xBytes, ...yBytes]);

  final certVerifyEcdsa256 =
      ecdsaSign(certificateEcdsa256.privateKey, plainText);

  print("Signature length: ${certVerifyEcdsa256.length}");
  ecdsaVerify(
    certificateEcdsa256.publickKey,
    plainText,
    certVerifyEcdsa256,
  );
}

void main() {
  testCertificateVerify();
}

final plainText = Uint8List.fromList([
  0x6f,
  0x47,
  0x97,
  0x85,
  0xcc,
  0x76,
  0x50,
  0x93,
  0xbd,
  0xe2,
  0x6a,
  0x69,
  0x0b,
  0xc3,
  0x03,
  0xd1,
  0xb7,
  0xe4,
  0xab,
  0x88,
  0x7b,
  0xa6,
  0x52,
  0x80,
  0xdf,
  0xaa,
  0x25,
  0x7a,
  0xdb,
  0x29,
  0x32,
  0xe4,
  0xd8,
  0x28,
  0x28,
  0xb3,
  0xe8,
  0x04,
  0x3c,
  0x38,
  0x16,
  0xfc,
  0x78,
  0xe9,
  0x15,
  0x7b,
  0xc5,
  0xbd,
  0x7d,
  0xfc,
  0xcd,
  0x83,
  0x00,
  0x57,
  0x4a,
  0x3c,
  0x23,
  0x85,
  0x75,
  0x6b,
  0x37,
  0xd5,
  0x89,
  0x72,
  0x73,
  0xf0,
  0x44,
  0x8c,
  0x00,
  0x70,
  0x1f,
  0x6e,
  0xa2,
  0x81,
  0xd0,
  0x09,
  0xc5,
  0x20,
  0x36,
  0xab,
  0x23,
  0x09,
  0x40,
  0x1f,
  0x4d,
  0x45,
  0x96,
  0x62,
  0xbb,
  0x81,
  0xb0,
  0x30,
  0x72,
  0xad,
  0x3a,
  0x0a,
  0xac,
  0x31,
  0x63,
  0x40,
  0x52,
  0x0a,
  0x27,
  0xf3,
  0x34,
  0xde,
  0x27,
  0x7d,
  0xb7,
  0x54,
  0xff,
  0x0f,
  0x9f,
  0x5a,
  0xfe,
  0x07,
  0x0f,
  0x4e,
  0x9f,
  0x53,
  0x04,
  0x34,
  0x62,
  0xf4,
  0x30,
  0x74,
  0x83,
  0x35,
  0xfc,
  0xe4,
  0x7e,
  0xbf,
  0x5a,
  0xc4,
  0x52,
  0xd0,
  0xea,
  0xf9,
  0x61,
  0x4e,
  0xf5,
  0x1c,
  0x0e,
  0x58,
  0x02,
  0x71,
  0xfb,
  0x1f,
  0x34,
  0x55,
  0xe8,
  0x36,
  0x70,
  0x3c,
  0xc1,
  0xcb,
  0xc9,
  0xb7,
  0xbb,
  0xb5,
  0x1c,
  0x44,
  0x9a,
  0x6d,
  0x88,
  0x78,
  0x98,
  0xd4,
  0x91,
  0x2e,
  0xeb,
  0x98,
  0x81,
  0x23,
  0x30,
  0x73,
  0x39,
  0x43,
  0xd5,
  0xbb,
  0x70,
  0x39,
  0xba,
  0x1f,
  0xdb,
  0x70,
  0x9f,
  0x91,
  0x83,
  0x56,
  0xc2,
  0xde,
  0xed,
  0x17,
  0x6d,
  0x2c,
  0x3e,
  0x21,
  0xea,
  0x36,
  0xb4,
  0x91,
  0xd8,
  0x31,
  0x05,
  0x60,
  0x90,
  0xfd,
  0xc6,
  0x74,
  0xa9,
  0x7b,
  0x18,
  0xfc,
  0x1c,
  0x6a,
  0x1c,
  0x6e,
  0xec,
  0xd3,
  0xc1,
  0xc0,
  0x0d,
  0x11,
  0x25,
  0x48,
  0x37,
  0x3d,
  0x45,
  0x11,
  0xa2,
  0x31,
  0x14,
  0x0a,
  0x66,
  0x9f,
  0xd8,
  0xac,
  0x74,
  0xa2,
  0xcd,
  0xc8,
  0x79,
  0xb3,
  0x9e,
  0xc6,
  0x66,
  0x25,
  0xcf,
  0x2c,
  0x87,
  0x5e,
  0x5c,
  0x36,
  0x75,
  0x86,
]);
